// ... [UNCHANGED CODE ABOVE] ...

function render(){
 ctx.clearRect(0,0,CANVAS_W,CANVAS_H);
 drawPath();
 drawGrid();

 // Draw towers as bowmen
 for(const t of towers){
   ctx.save();
   ctx.strokeStyle=t.color; ctx.globalAlpha=0.13;
   ctx.beginPath();ctx.arc(t.x,t.y,t.range,0,Math.PI*2);ctx.stroke();
   ctx.globalAlpha=1.0;

   // Draw bowman:
   // Body
   ctx.fillStyle = "#cab98b";
   ctx.beginPath();
   ctx.arc(t.x, t.y+8, 7, 0, Math.PI*2); // torso
   ctx.fill();
   // Head
   ctx.beginPath();
   ctx.arc(t.x, t.y-4, 5, 0, Math.PI*2); // head
   ctx.fill();
   // Arms with bow (simple arc for bow)
   ctx.strokeStyle = "#7b593a";
   ctx.lineWidth = 2;
   ctx.beginPath();
   ctx.arc(t.x+7, t.y+2, 7, Math.PI*1.2, Math.PI*1.8);
   ctx.stroke();
   // Arm holding arrow (straight line)
   ctx.beginPath();
   ctx.moveTo(t.x, t.y+4);
   ctx.lineTo(t.x+10, t.y-4);
   ctx.stroke();

   // Bowman's color accent (shirt)
   ctx.globalAlpha = 0.60;
   ctx.fillStyle = t.color;
   ctx.fillRect(t.x-6, t.y+7, 12, 7);

   ctx.restore();
 }
 // Draw enemies as animals ("crab"-like creatures)
 for(const en of enemies){
   ctx.save();

   // Crab body
   ctx.fillStyle="#e94e36";
   ctx.beginPath();
   ctx.ellipse(en.x, en.y+4, 11, 8, 0, 0, Math.PI*2);
   ctx.fill();

   // Crab shell accent
   ctx.fillStyle="#fbb545";
   ctx.beginPath();
   ctx.arc(en.x, en.y+2, 6, Math.PI*1.25, Math.PI*1.75);
   ctx.fill();

   // Crab legs (simple lines)
   ctx.strokeStyle="#d27d31";
   ctx.lineWidth=2;
   for(let i=-1; i<=1; i+=2) {
     // front leg
     ctx.beginPath();ctx.moveTo(en.x+i*8,en.y+7);ctx.lineTo(en.x+i*14,en.y+15);ctx.stroke();
     // back leg
     ctx.beginPath();ctx.moveTo(en.x+i*6,en.y+10);ctx.lineTo(en.x+i*10,en.y+18);ctx.stroke();
   }

   // Eyes (black dots)
   ctx.fillStyle="#222";
   ctx.beginPath();ctx.arc(en.x-3,en.y-2,1.3,0,Math.PI*2);ctx.arc(en.x+3,en.y-2,1.3,0,Math.PI*2);ctx.fill();

   // Health bar
   ctx.fillStyle="#222";
   ctx.fillRect(en.x-13,en.y-18,26,5);
   ctx.fillStyle="#5fc23c";
   const barW=Math.max(1,(en.hp/en.maxHp)*26);
   ctx.fillRect(en.x-13,en.y-18,barW,5);

   ctx.restore();
 }

 // Draw bullets (arrows) - SKIP hit bullets
 for(const b of bullets){
   if(b.hit) continue; // FIX: Do not render bullets that have hit
   ctx.save();
   // Draw arrow shaft
   ctx.strokeStyle=b.color; 
   ctx.lineWidth=2.2;
   let dx = (b.target && b.target.hp>0) ? b.target.x-b.x : 12;
   let dy = (b.target && b.target.hp>0) ? b.target.y-b.y : 0;
   let len = Math.hypot(dx,dy)||1;
   let lx = dx/len * 16;
   let ly = dy/len * 16;
   ctx.beginPath();
   ctx.moveTo(b.x-lx*0.25,b.y-ly*0.25);
   ctx.lineTo(b.x+lx*0.75,b.y+ly*0.75);
   ctx.stroke();

   // Arrow head
   let angle = Math.atan2(ly,lx);
   ctx.save();
     ctx.translate(b.x+lx*0.75,b.y+ly*0.75);
     ctx.rotate(angle);
     ctx.fillStyle = "#ffe45e";
     ctx.beginPath();
     ctx.moveTo(0,0);
     ctx.lineTo(-5,-2);
     ctx.lineTo(-5,+2);
     ctx.closePath();
     ctx.fill();
   ctx.restore();

   // Arrow tail fletching
   ctx.save();
     ctx.translate(b.x-lx*0.20,b.y-ly*0.20);
     ctx.rotate(angle);
     ctx.fillStyle = "#fff";
     ctx.beginPath();
     ctx.moveTo(0,0);
     ctx.lineTo(-3,-1);
     ctx.lineTo(-3,+1);
     ctx.closePath();
     ctx.fill();
   ctx.restore();

   ctx.restore();
 }

 // Placement preview (ENHANCED: Full tower art + cost below)
 if(
    placingMode && 
    !gameOver &&
    _lastMouse && 
    _lastMouse[0] >= 0 && _lastMouse[1] >= 0 &&
    _lastMouse[0] < CANVAS_W && _lastMouse[1] < CANVAS_H
 ){
   canvas.style.cursor='crosshair';
   const mx=_lastMouse[0], my=_lastMouse[1];
   const col=Math.floor(mx/GRID_SIZE), row=Math.floor(my/GRID_SIZE);
   if(col>=0&&col<MAP_W&&row>=0&&row<MAP_H){
     let valid=canPlaceTower(row,col)&&TOWER_TYPES[selectedTowerTypeIdx].cost<=gold;
     let x=col*GRID_SIZE+GRID_SIZE/2,y=row*GRID_SIZE+GRID_SIZE/2;
     const towerType = TOWER_TYPES[selectedTowerTypeIdx];

     ctx.save();

     // Range circle (faint)
     ctx.globalAlpha=.13;
     ctx.fillStyle=towerType.color;
     ctx.beginPath();ctx.arc(x,y,towerType.range,0,Math.PI*2);ctx.fill();

     // Tower preview: Full bowman (body/head/bow/arms/shirt)
     // Body
     ctx.globalAlpha = 0.35;
     ctx.fillStyle = "#cab98b";
     ctx.beginPath();ctx.arc(x,y+8,7,0,Math.PI*2);ctx.fill();
     // Head
     ctx.beginPath();ctx.arc(x,y-4,5,0,Math.PI*2);ctx.fill();

     // Bowman's color accent (shirt)
     ctx.globalAlpha = 0.18;
     ctx.fillStyle = towerType.color;
     ctx.fillRect(x-6,y+7,12,7);

     // Bow and arms (semi-transparent)
     ctx.globalAlpha = 0.40;
     // Bow
     ctx.strokeStyle = "#7b593a";
     ctx.lineWidth = 2;
     ctx.beginPath();ctx.arc(x+7,y+2,7,Math.PI*1.2,Math.PI*1.8);ctx.stroke();
     // Arm holding arrow (straight line)
     ctx.beginPath();ctx.moveTo(x,y+4);ctx.lineTo(x+10,y-4);ctx.stroke();

     // Outline if invalid
     if(!valid){
       ctx.globalAlpha=.55;ctx.strokeStyle="#f44";ctx.setLineDash([4]);
       ctx.beginPath();ctx.arc(x,y,towerType.radius||12,0,Math.PI*2);ctx.stroke();

       // Draw a red X overlay at center if invalid placement
       ctx.globalAlpha=0.48;ctx.setLineDash([]);
       const size=13;
       ctx.strokeStyle="#c22";ctx.lineWidth=3;
       ctx.beginPath();ctx.moveTo(x-size,y-size);ctx.lineTo(x+size,y+size);ctx.moveTo(x-size,y+size);ctx.lineTo(x+size,y-size);ctx.stroke();
       ctx.lineWidth=1;
     }

     // Tower cost below preview
     const costText = `$${towerType.cost}`;
     let colorCost = towerType.cost <= gold ? "#22cc22" : "#d32";
     ctx.globalAlpha = 1.0;
     ctx.font = "bold 15px monospace";
     ctx.textAlign="center";
     ctx.textBaseline="top";
     ctx.save();
      // Shadow for readability
      ctx.shadowColor="rgba(0,0,0,.35)";
      ctx.shadowBlur=3;
      ctx.shadowOffsetY=1;
      ctx.fillStyle=colorCost;
      ctx.fillText(costText,x,y+21);
      // Name of tower type above preview (optional)
      /*
      if(towerType.name){
        ctx.font="bold 13px monospace";
        ctx.shadowBlur=2; 
        let name=towerType.name||"Bowman";
        ctx.fillStyle="#fff"; 
        ctx.textBaseline="bottom";
        ctx.fillText(name,x,y-14);
      }
      */
     ctx.restore();

     ctx.restore();
   }
 } else {
    canvas.style.cursor='default';
 }

}

// ... [UNCHANGED CODE BELOW] ...